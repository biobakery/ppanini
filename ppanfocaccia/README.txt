PPAnFOCAccIA - Predicting Prioritized Annotations Following Ontological Curation Accurately Integrating Attributes

PPAnFOCAccIA assigns predicted Gene Ontology Annotations To prioritized clusters outputted from PPANINI. The current pipeline trains and SVM to make a binary prediction about whether a cluster should have 1 specific annotation, cross validates this model with 4 folds, and generates PR Curves, Convexed Hulled PR Curves, and ROC curves as well as a data file containing ML performance issue to help in evaluating candidate models. As of yet there is no implementation to apply the model to novel prioritized clusters. The pipline can be run automatically or modularly. The pipeline requires an active X window for plotting (it is all done in the background but is still required because of some python library dependencies). There is some refactoring needed as everything must currently be executed in the same directory. Ensure that all .sh files have proper permissions set to execute.  

Possible Input Explanations:
PPANINIOutput-summarized output file from a previous PPANINI run (using BM_table.txt for current testing)
SwissProt-proteins with manually curated annotations from UniProt (using uniprot-all.tab for current testing; file generated by their download service---the name is not intuitve)
OutputFile-the name of an output file
POS/NEGfeatureRatio-An Integer x such that the number of negative examples to be included in randomly generated folds is x*[number of positive labeled examples]
RanomnessSeed-An Integer that sets the seed for random number generation; makes it so that specific folds are reproducible 

To Run Automatically:
./pipeline.sh PPANINIOutput SwissProt POS/NEGfeatureRatio RandomnessSeed
The pipeline currently builds a classification model for the GO Term that has the most annotations from running the Go Term Selector. A custom GO Term from the results from the selector can be chosen by using the modular pipeline.   

Modular Pipeline Current Steps:
1) Run Go Term Selector:
python selectGoTerms.py PPANINIOutput SwissProt OutputFile. 
This will generate an output file that shows how many times each GO Term is present in the set of clusters both manually annotated in SwissProt and in the prioritized PPANINI Output. 
2) Select GO Term to train pipeline on:
Future Pipeline will run for all GO terms generated from step 1). File to peruse is [OutputFile].sorted.
3) Generate folds for training, classification, and cross validation:
python goTermToTrainingAndTestSets.py GOTerm PPANINIOutputFile SwissProtFile POS/NEGfeatureRatio RandomnessSeed.
POS/NEGfeatureRatio * number of pos labeled examples == # of uncharacterized clusters randomlly assigned to be negative examples. RanomnessSeed option is required and ensures reproducibility of folds is possible. 
4) Train 4 fold cross-validation in parallel:
python train.py. Machine this runs on should ideally have 5 cores. Pipeline utilizes Thorsten Joachims SVMLight (http://www.cs.cornell.edu/people/tj/). 
5) Classify:
./classify.sh
6) Generate ROC curves, PR Curves, Convexed Hulled-PR Curves, and ML data file for programmatic analaysis:
python mlEvaluationPlots.py. requires numerous python libraries. 
7) Organize Pipeline Files:
./outputFolderOrganization.sh


If future maitenence issues arise regard this code please contact me at jluber@g.harvard.edu 
 
